import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.types import Message
from typing import List
from NeuralNetwork import GigaChatBot as genbot
from NeuralNetwork import DetectYolo as detect
from TOKENSFILE import TelegramToken

class ToolsAndFunction:

    def __init__(self):
        self.string_product: str = ''
        self.dishes: str = ''
        self.recipe_dishes: str = ''
        self.__keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")],
                [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")],
                [KeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è")],
                [KeyboardButton(text="–†–µ—Ü–µ–ø—Ç")],
                [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
            ],
            resize_keyboard=True
        )
    def generate_bot(self, selected_dishes=None) -> None:
        conversation_history = []
        if selected_dishes == None:
            response, conversation_history = genbot.get_chat_completion(genbot.giga_token, f"–Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –Ω–∞–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {self.string_product}. –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫–æ–π —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–∞: –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–ø–∏—à–∏ '–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤', –∞ –¥–∞–ª—å—à–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1.**–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞** –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ —Å –∫–∞–∂–¥—ã–º –±–ª—é–¥–æ–º", conversation_history)
            self.dishes = conversation_history[1]['content']
            self.string_product: str = ''
        else:
            response, conversation_history = genbot.get_chat_completion(genbot.giga_token,f"–Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–µ—Ü–µ–ø—Ç {selected_dishes}. –í –Ω–∞—á–∞–ª–µ –Ω–∞–ø–∏—à–∏: '–†–µ—Ü–µ–ø—Ç {selected_dishes}:'",conversation_history)
            self.recipe_dishes = conversation_history[1]['content']

    def detect_product(self, image: str) -> str:
        return detect.YOLODetectObject(image)

    def generate_dishes(self) -> str:
        self.generate_bot()
        return self.dishes

    def generate_recipe(self, user_message: int) -> str:
        selected_dishes: str = ''
        count_dishes: int = 0
        for dish in self.dishes.split('\n'):
            if '**' in dish and dish.count('**') == 2:
                count_dishes += 1
                if count_dishes == user_message:
                    selected_dishes = dish[dish.find('**')+2:dish.rfind('**')]
        if count_dishes < user_message:
            return -1
        self.generate_bot(selected_dishes=selected_dishes)
        return self.recipe_dishes

    def start_work(self, message) -> None:
        self.string_product: str = ''
        return message.answer(
            text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.__keyboard
        )
    def forming_string_from_products(self) -> str:
        products: List[str] = list(Bot.detect_product('test_photo.jpg'))
        for product in products[:-1]:
            self.string_product += f'{product}, '
        self.string_product += f'{products[-1]} '
        return self.string_product

    def add_products_in_string(self, message) -> None:
        new_products = ' '.join(message.split())
        self.string_product += new_products

# –¥–∞–ª—å—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω —Å–∞–º –±–æ—Ç

flag_photo: int = 0
flag_recipe: int = 0
flag_add_product: int = 0
TOKEN = TelegramToken()
dp = Dispatcher()
bot = Bot(token=TOKEN)
Bot = ToolsAndFunction()
@dp.message(CommandStart())
async def command_start_handler(message: Message):
    await Bot.start_work(message)

@dp.message(F.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
async def upload_photo_handler(message: Message):
    global flag_photo
    flag_photo = 1
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤!")

@dp.message(F.text == "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
async def generate(message: Message):
    if Bot.string_product != '':
        await message.answer(Bot.generate_dishes())
    else:
        await message.answer('–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã')
@dp.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã')
async def add_products(message: Message):
    global flag_add_product
    flag_add_product = 1
    await message.answer('–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã')
@dp.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def information(message: Message):
    await message.answer("üçé–≠—Ç–æ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥, –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n\nü•ï–î–æ–±–∞–≤–ª—è—Ç—å –±–ª—é–¥–∞ –º–æ–∂–Ω–æ –∫–∞–∫ —Å –ø–æ–º–æ—â—å—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç'\n\nüçÑ–ö–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è'\n\nüçå–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª—é–¥, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–†–µ—Ü–µ–ø—Ç' –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ")

@dp.message(F.text == "–†–µ—Ü–µ–ø—Ç")
async def recipe(message: Message):
    global flag_recipe
    if Bot.dishes != '':
        flag_recipe = 1
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª—é–¥–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–µ–Ω —Ä–µ—Ü–µ–ø—Ç')
    else:
        await message.answer('–í—ã –µ—â—ë –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ –±–ª—é–¥–∞')
        flag_recipe = 0

@dp.message()
async def interaction_with_the_bot(message: Message):
    global flag_add_product, flag_recipe, flag_photo
    if flag_add_product == 1: # —á–∞—Å—Ç—å –∫–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        Bot.add_products_in_string(message.text)
        await message.answer(f'–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:\n{Bot.string_product}')
        flag_add_product = 0
    if flag_recipe == 1: # —á–∞—Å—Ç—å –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –±–ª—é–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
        user_message = message.text
        if any(number not in '0123456789' for number in str(user_message)) or int(user_message) <= 0:
            await message.answer('–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        else:
            recipe_selected_dishes = Bot.generate_recipe(int(user_message))
            if recipe_selected_dishes == -1:
                await message.answer('–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            else:
                await message.answer(recipe_selected_dishes)
        flag_recipe = 0
    if flag_photo == 1: # —á–∞—Å—Ç—å –∫–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
        await message.bot.download(file=message.photo[-1].file_id, destination='test_photo.jpg')
        flag_photo = 0
        await message.answer(f"–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:\n{Bot.forming_string_from_products()}")

# –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
async def main() -> None:
    await dp.start_polling(bot)
logging.basicConfig(level=logging.INFO, stream=sys.stdout)
asyncio.run(main())



